# @package _global_

# to execute this experiment run:
# python train.py experiment=example

defaults:
  - override /env: tacc-lonestar6

image_size: [396, 640]
point_cloud_range: [-51.2, -51.2, -10, 51.2, 51.2, 10]
upsample_interpolate_neck: 2

voxel_size: [0.8, 0.8, 20]
xbound: [-51.2, 51.2, 0.8]
ybound: [-51.2, 51.2, 0.8]
pointpillar_output_shape: [128, 128] # (x_max-x_min / x_res, y_max-y_min / y_res)
upsample_after_conv: 1
downsample_raw_ele: 4
name: bev_grid_map/128_depth_test

batch_size: 8
num_workers: 16
persistent_workers: false
prefetch_factor: 2
pkl_cfg_file: jpl6_camp_roberts_y1_d3_t10_jeffery_high_speed_trails_Wed_Jun__8_22-22-37_2022_utc.pkl
use_images: true
use_lidar: true
use_raw_elevation: true
use_gvom: false
freeze_backbones: false
training_steps: 24000
lr: 1e-3

logger:
  wandb:
    name: ${general.name}
    project: "bev_gridmap"

general:
  name: ${name}
  dataset_dir:  /tmp/depth_t10/ # ${env.dataset_root_dir}
  result_dir: ${env.result_dir}
  model_path: ${general.result_dir}/${general.name}/${now:%Y-%m-%d}_${now:%H-%M-%S}
  tags: ["refactor", "dem", "depth"]
  train: true   # set false to skip model training
  test: true
  # ckpt_path: /work/09654/mhpatel/ls6/results/bev_grid_map/128_depth_noloss/2024-01-30_22-16-55/epoch=91-step=24000---last.ckpt # simply provide checkpoint path to resume training
  ckpt_path: /work/09654/mhpatel/ls6/results/bev_grid_map/128_depth/2024-01-30_20-48-00/epoch=91-step=24000---last.ckpt
  seed: 41 # seed for random number generators in pytorch, numpy and python.random

trainer:
  _target_: lightning.pytorch.trainer.Trainer
  precision: 16-mixed
  accumulate_grad_batches: 1
  fast_dev_run: false
  limit_train_batches: 1.0
  limit_val_batches: 1.0
  limit_test_batches: 1.0
  max_epochs: -1
  max_steps: ${training_steps}
  num_sanity_val_steps:  0
  check_val_every_n_epoch: 1
  accelerator: gpu
  detect_anomaly: false
  profiler: false  # 
  devices: 1  # All
  deterministic: false
  # strategy: str = None  # ddp # TODO

datamodule:
  _target_: perception_bev_learning.dataset.BEVDataModuleDepth

  dataset:
    target_layers:
      wheel_risk:
        name: wheel_risk
        gridmap_topic: g_traversability_map_micro_gt
        scale: 1.0
        clip_min: 0
        clip_max: 1
        aux_id: 0
      elevation:
        name: elevation_fused
        gridmap_topic: g_traversability_map_micro
        scale: 0.05
        aux_id: 2
        clip_min: -1
        clip_max: 1

model:
  _target_: perception_bev_learning.lightning.LightningBEVDepth
  path: ${general.model_path}

  metrics:
    hdd_statistic: true
    fatal_risk: 0.35
    
  target_layers:
    wheel_risk: 
      name: wheel_risk
      loss_scale: 2.0
      pre_loss_function:
        _target_: torch.sigmoid
        _partial_: true
      loss_function:
        _target_: perception_bev_learning.loss.wheel_risk_mse
        _partial_: true
      post_loss_function:
        _target_: perception_bev_learning.loss.skip
        _partial_: true
    elevation: 
      name: elevation
      loss_scale: 1.0
      pre_loss_function:
        _target_: perception_bev_learning.loss.skip
        _partial_: true
      loss_function:
        _target_: perception_bev_learning.loss.elevation_fused_l1
        _partial_: true
      post_loss_function:
        _target_: perception_bev_learning.loss.skip
        _partial_: true

  visualizer:
    # Plotting Configuration
    train: 0
    val: 0
    test: 0
    plot_sequence: false
    # Plotting BEV Maps
    plot_all_risks: false
    plot_all_elevations: false
    plot_all_maps: true
    # Plotting Images
    plot_raw_images: true
    # Plotting Project data onto images
    project_gt_BEV_on_image: true
    project_pred_BEV_on_image: true
    # Generate Summary Dashboard
    plot_dashboard: true

  network:
    # specify the main network module (BevTravNet in our case)
    _target_: perception_bev_learning.models.fusion_models.BevTravNetDepth
    cfg_model:
      use_images: ${use_images}
      use_lidar: ${use_lidar}
      use_raw_elevation: ${use_raw_elevation}
      aux_layers: ${datamodule.dataset.aux_layers}
      use_gvom: ${use_gvom}
      use_seperate_decoder: false # TODO
      freeze_backbones: ${freeze_backbones}
      downsample_raw_ele: ${downsample_raw_ele}
      encoders:
        camera:
          backbone:
            type: EfficientNetB
            model_name: efficientnet-b0 # b0-b7
            drop_rate: 0.2
            out_indices: [2, 3, 4] # Use 2,3,4 for all efficientNetb0 - b7
            
          neck:
            type: GeneralizedLSSFPN
            in_channels: [40, 112, 320] 
            #b0[40, 112, 320] #b1[40, 112, 320] #b2[48, 120, 352] #b3[48,136,384]
            #b4[56, 160, 448] #b5[64, 176, 512] #b6[72, 200, 576] #b7[80, 224, 640]
            out_channels: 256
            start_level: 0
            num_outs: 3
            norm_cfg:
              type: BN2d
              requires_grad: true
            act_cfg:
              type: ReLU
              inplace: true
            upsample_cfg:
              mode: bilinear
              align_corners: false
          vtransform:
            type: LSSBEVDepthTransform
            in_channels: 256
            out_channels: 80
            image_size: ${image_size}
            # feature_size: ${image_size}//8 #TODO
            feature_downsample: 8
            xbound: ${xbound}
            ybound: ${ybound}
            zbound: [-20.0, 20.0, 40.0]
            dbound: [1.0, 60.0, 0.5]
            downsample: 1
            depth_refinement: false
            depth_net_conf:
              mid_channels: 256
        lidar:
          voxelize:
            max_num_points: 16
            point_cloud_range: ${point_cloud_range}
            voxel_size: ${voxel_size}
            max_voxels: [32000, 64000]
          voxelize_reduce: false # Keep this false -> Useful only for 3D Sparse Convs
          backbone:
            type: PointPillarsNet
            voxel_encoder:
              type: PillarFeatureNet
              in_channels: 3 # (x, y, z)
              feat_channels: [64]
              with_distance: False
              voxel_size: ${voxel_size}
              point_cloud_range: ${point_cloud_range}
            middle_encoder:
              type: PointPillarsScatter
              in_channels: 64
              output_shape: ${pointpillar_output_shape} # (x_max-x_min / x_res, y_max-y_min / y_res)
            backbone:
              type: SECOND
              in_channels: 64
              out_channels: [64, 128, 256]
              layer_nums: [3, 5, 5]
              layer_strides: [2, 2, 2]
            neck:
              type: SECONDFPN
              in_channels: [64, 128, 256]
              out_channels: [32, 32, 32]
              upsample_strides: [1, 2, 4]
              use_conv_for_no_stride: true
              upsample_interpolate: ${upsample_interpolate_neck}
      fuser:
        type: ConvFuserUpsample
        in_channels: [80, 96] # This value will get overwritten from the fusion model init
        out_channels: 256
        upsample: ${upsample_after_conv}
      decoder:
        backbone:
          type: BEVDecoder
          in_channels: 256
          out_channels: 128
          p_dropout: 0
        neck:
          type: EmptyNeck
      head:
        type: BEVSimpleHead
        in_channels: 128
        channels_wheel_risk: 1
        channels_elevation: 1
        scale_factor: 4

  optimizer:
    _target_: torch.optim.Adam
    _partial_: true
    lr: ${lr}
    weight_decay: 1.0e-7

  scheduler:
    _target_: torch.optim.lr_scheduler.OneCycleLR
    _partial_: true
    max_lr: ${model.optimizer.lr}
    total_steps: ${trainer.max_steps}
    pct_start: 0.1
    div_factor: 25.0
    final_div_factor: 10000.0
